{"ast":null,"code":"var _jsxFileName = \"/home/sergiy/GitHub/zacademi/goit-react-hw-02-feedback/src/components/App.js\";\nimport React, { useState } from 'react';\nimport { Notification } from './Notification/Notification';\nimport { Statistics } from './Statistics/Statistics';\nimport { FeedbackOptions } from './FeedbackOptions/FeedbackOptions';\nimport { Section } from './Section/Section';\nimport options from './data/options.json';\nimport './App.css';\n\nfunction App() {\n  const [feedbackOptions, setFeedbackOptions] = useState({\n    good: 0,\n    neutral: 0,\n    bad: 0\n  });\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleLeaveFeedback = ({\n    name\n  }) => {\n    console.log(name); // setFeedbackOptions(prevState => ({...prevState, [name]: prevState[name] + 1}))\n    // if (id === 1) setGood(value => value + 1);\n    // if (id === 2) setNeutral(value => value + 1);\n    // if (id === 3) setBad(value => value + 1);\n  };\n\n  const totalValue = () => {\n    const {\n      good,\n      neutral,\n      bad\n    } = feedbackOptions;\n    return good + neutral + bad;\n  }; // const isShowSta = useMemo(() => !!(good + neutral + bad), [good + neutral + bad]);\n\n\n  const positivePercentage = () => {\n    const total = good + neutral + bad;\n    const percent = good * 100 / total;\n    return parseFloat(percent.toFixed(1)) || 0;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Section, {\n    title: \"Pleace leave feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FeedbackOptions, {\n    options: options,\n    onLeaveFeedback: handleLeaveFeedback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Section, {\n    title: \"Statistics\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, totalValue() ? /*#__PURE__*/React.createElement(Statistics, {\n    good: feedbackOptions.good,\n    neutral: feedbackOptions.neutral,\n    bad: feedbackOptions.bad,\n    total: totalValue(),\n    positivePercentage: positivePercentage(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(Notification, {\n    message: \"No feedback given\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/sergiy/GitHub/zacademi/goit-react-hw-02-feedback/src/components/App.js"],"names":["React","useState","Notification","Statistics","FeedbackOptions","Section","options","App","feedbackOptions","setFeedbackOptions","good","neutral","bad","setNeutral","setBad","handleLeaveFeedback","name","console","log","totalValue","positivePercentage","total","percent","parseFloat","toFixed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAkC,OAAlC;AAEA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,eAAT,QAAgC,mCAAhC;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC;AACrDS,IAAAA,IAAI,EAAE,CAD+C;AAErDC,IAAAA,OAAO,EAAE,CAF4C;AAGrDC,IAAAA,GAAG,EAAE;AAHgD,GAAD,CAAtD;AAMA,QAAM,CAACD,OAAD,EAAUE,UAAV,IAAwBZ,QAAQ,CAAC,CAAD,CAAtC;AAEA,QAAM,CAACW,GAAD,EAAME,MAAN,IAAgBb,QAAQ,CAAC,CAAD,CAA9B;;AAEA,QAAMc,mBAAmB,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAY;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADsC,CAEtC;AACA;AACA;AACA;AACD,GAND;;AAQA,QAAMG,UAAU,GAAG,MAAM;AACvB,UAAM;AAACT,MAAAA,IAAD;AAAOC,MAAAA,OAAP;AAAgBC,MAAAA;AAAhB,QAAuBJ,eAA7B;AACA,WAAQE,IAAI,GAAGC,OAAP,GAAiBC,GAAzB;AACD,GAHD,CAnBa,CAuBb;;;AAEA,QAAMQ,kBAAkB,GAAG,MAAM;AAC/B,UAAMC,KAAK,GAAGX,IAAI,GAAGC,OAAP,GAAiBC,GAA/B;AACA,UAAMU,OAAO,GAAIZ,IAAI,GAAG,GAAR,GAAeW,KAA/B;AACA,WAAOE,UAAU,CAACD,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAD,CAAV,IAAkC,CAAzC;AACD,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AACE,IAAA,OAAO,EAAElB,OADX;AAEE,IAAA,eAAe,EAAES,mBAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAOE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,UAAU,kBACT,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEX,eAAe,CAACE,IADxB;AAEE,IAAA,OAAO,EAAEF,eAAe,CAACG,OAF3B;AAGE,IAAA,GAAG,EAAEH,eAAe,CAACI,GAHvB;AAIE,IAAA,KAAK,EAAEO,UAAU,EAJnB;AAKE,IAAA,kBAAkB,EAAEC,kBAAkB,EALxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADS,gBAST,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAC,mBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CAPF,CADF;AAuBD;;AAED,eAAeb,GAAf","sourcesContent":["import React, { useState,  } from 'react';\n\nimport { Notification } from './Notification/Notification';\nimport { Statistics } from './Statistics/Statistics';\nimport { FeedbackOptions } from './FeedbackOptions/FeedbackOptions';\nimport { Section } from './Section/Section';\n\nimport options from './data/options.json';\n\nimport './App.css';\n\nfunction App() {\n  const [feedbackOptions, setFeedbackOptions] = useState({\n    good: 0,\n    neutral: 0,\n    bad: 0\n  });\n\n  const [neutral, setNeutral] = useState(0);\n\n  const [bad, setBad] = useState(0);\n\n  const handleLeaveFeedback = ({name}) => {\n    console.log(name);\n    // setFeedbackOptions(prevState => ({...prevState, [name]: prevState[name] + 1}))\n    // if (id === 1) setGood(value => value + 1);\n    // if (id === 2) setNeutral(value => value + 1);\n    // if (id === 3) setBad(value => value + 1);\n  };\n\n  const totalValue = () => {\n    const {good, neutral, bad} = feedbackOptions\n    return (good + neutral + bad)\n  };\n  // const isShowSta = useMemo(() => !!(good + neutral + bad), [good + neutral + bad]);\n\n  const positivePercentage = () => {\n    const total = good + neutral + bad;\n    const percent = (good * 100) / total;\n    return parseFloat(percent.toFixed(1)) || 0;\n  };\n\n  return (\n    <div className=\"App\">\n      <Section title=\"Pleace leave feedback\">\n        <FeedbackOptions\n          options={options}\n          onLeaveFeedback={handleLeaveFeedback}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {totalValue() ? (\n          <Statistics\n            good={feedbackOptions.good}\n            neutral={feedbackOptions.neutral}\n            bad={feedbackOptions.bad}\n            total={totalValue()}\n            positivePercentage={positivePercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}